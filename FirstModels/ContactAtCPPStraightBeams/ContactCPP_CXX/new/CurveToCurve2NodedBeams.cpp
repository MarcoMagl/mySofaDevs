/*************************************************************
* AceGen    6.912 MacOSX (20 Oct 18)                         *
*           Co. J. Korelc  2013           15 Apr 20 08:42:49 *
**************************************************************
User     : Full professional version
Notebook : ContactAtCPPBeamsWith2Nodes
Evaluation time                 : 5 s     Mode  : Prototype
Number of formulae              : 363     Method: Automatic
Subroutine                      : CurveToCurve2NodedBeams size: 8404
Total size of Mathematica  code : 8404 subexpressions
Total size of C code            : 20800 bytes */
#include "AceGenSources/sms.h"

/******************* S U B R O U T I N E *********************/
void CurveToCurve2NodedBeams(double X[4][3],double u[4][3],double (*kN)
     ,double (*radiusBI),double (*radiusBJ),double (*T),double (*gN),double h[2]
     ,double R[12],double K[12][12],int (*ExitCode),int (*CubicPenaltyPotential))
{
double v[788];
int i41,i77,i201,i227,b100,b101,b104,b105,b190,b191,b192,b193,b194,b195,b203
     ,b283;
v[1]=X[0][0];
v[2]=X[0][1];
v[3]=X[0][2];
v[4]=X[1][0];
v[5]=X[1][1];
v[6]=X[1][2];
v[7]=X[2][0];
v[8]=X[2][1];
v[9]=X[2][2];
v[10]=X[3][0];
v[11]=X[3][1];
v[12]=X[3][2];
v[13]=u[0][0];
v[14]=u[0][1];
v[15]=u[0][2];
v[16]=u[1][0];
v[17]=u[1][1];
v[18]=u[1][2];
v[19]=u[2][0];
v[20]=u[2][1];
v[21]=u[2][2];
v[22]=u[3][0];
v[23]=u[3][1];
v[24]=u[3][2];
v[25]=v[1]+v[13];
v[26]=v[14]+v[2];
v[27]=v[15]+v[3];
v[28]=v[16]+v[4];
v[66]=-v[25]/2e0+v[28]/2e0;
v[29]=v[17]+v[5];
v[67]=-v[26]/2e0+v[29]/2e0;
v[30]=v[18]+v[6];
v[68]=-v[27]/2e0+v[30]/2e0;
v[76]=(2e0*(v[66]*v[66])+2e0*(v[67]*v[67])+2e0*(v[68]*v[68]))/2e0;
v[31]=v[19]+v[7];
v[32]=v[20]+v[8];
v[33]=v[21]+v[9];
v[34]=v[10]+v[22];
v[69]=-v[31]/2e0+v[34]/2e0;
v[35]=v[11]+v[23];
v[70]=-v[32]/2e0+v[35]/2e0;
v[36]=v[12]+v[24];
v[71]=-v[33]/2e0+v[36]/2e0;
v[75]=(2e0*(v[69]*v[69])+2e0*(v[70]*v[70])+2e0*(v[71]*v[71]))/2e0;
v[74]=(-2e0*v[66]*v[69]-2e0*v[67]*v[70]-2e0*v[68]*v[71])/2e0;
v[310]=-(v[74]*v[74])+v[75]*v[76];
v[96]=v[74]/v[76];
v[97]=v[75]-v[74]*v[96];
v[37]=(*radiusBI);
v[38]=(*radiusBJ);
v[39]=(*kN);
v[40]=(*T);
i41=(*CubicPenaltyPotential);
v[42]=h[0];
v[43]=h[1];
printf("\n%s ","xBI:");
printf("\n%g %g %g %g %g %g ",(double)v[25],(double)v[26],(double)v[27],(double)v[28],(double)v[29]
 ,(double)v[30]);
printf("\n%s ","xBJ:");
printf("\n%g %g %g %g %g %g ",(double)v[31],(double)v[32],(double)v[33],(double)v[34],(double)v[35]
 ,(double)v[36]);
printf("\n%s ","radii:");
printf("\n%g %g ",(double)v[37],(double)v[38]);
for(i77=1;i77<=20;i77++){
 v[78]=v[42];
 v[82]=1e0+v[78];
 v[81]=1e0-v[78];
 v[79]=v[43];
 v[87]=1e0+v[79];
 v[86]=1e0-v[79];
 v[80]=(v[25]*v[81])/2e0+(v[28]*v[82])/2e0;
 v[83]=(v[26]*v[81])/2e0+(v[29]*v[82])/2e0;
 v[84]=(v[27]*v[81])/2e0+(v[30]*v[82])/2e0;
 v[85]=(v[31]*v[86])/2e0+(v[34]*v[87])/2e0;
 v[88]=(v[32]*v[86])/2e0+(v[35]*v[87])/2e0;
 v[89]=(v[33]*v[86])/2e0+(v[36]*v[87])/2e0;
 v[90]=-v[80]+v[85];
 v[91]=-v[83]+v[88];
 v[92]=-v[84]+v[89];
 v[95]=(2e0*v[69]*v[90]+2e0*v[70]*v[91]+2e0*v[71]*v[92])/2e0;
 v[94]=(-2e0*v[66]*v[90]-2e0*v[67]*v[91]-2e0*v[68]*v[92])/2e0;
 v[98]=(-v[95]+v[94]*v[96])/v[97];
 v[99]=(-v[94]-v[74]*v[98])/v[76];
 v[42]=v[42]+v[99];
 v[43]=v[43]+v[98];
 b100=sqrt((v[98]*v[98])+(v[99]*v[99]))<=0.1e-9;
 if(b100){
  break;
 } else {
 };
};/* end for */
b104=i77>=20;
if(b104){
 printf("\n%s ","failure of the local scheme ! ITERATIVE SCHEME FAILED TO CONVERGE");
 (*ExitCode)=2e0;
 return;
} else {
 (*ExitCode)=1e0;
};
v[110]=v[42];
v[111]=v[43];
v[112]=v[110];
v[116]=1e0+v[112];
v[115]=1e0-v[112];
v[113]=v[111];
v[121]=1e0+v[113];
v[120]=1e0-v[113];
v[114]=(v[115]*v[25])/2e0+(v[116]*v[28])/2e0;
v[117]=(v[115]*v[26])/2e0+(v[116]*v[29])/2e0;
v[118]=(v[115]*v[27])/2e0+(v[116]*v[30])/2e0;
v[119]=(v[120]*v[31])/2e0+(v[121]*v[34])/2e0;
v[122]=(v[120]*v[32])/2e0+(v[121]*v[35])/2e0;
v[123]=(v[120]*v[33])/2e0+(v[121]*v[36])/2e0;
v[124]=-v[114]+v[119];
v[141]=v[124]/2e0;
v[125]=-v[117]+v[122];
v[143]=v[125]/2e0;
v[126]=-v[118]+v[123];
v[308]=v[124]*v[34]+v[125]*v[35]+v[126]*v[36];
v[307]=v[124]*v[31]+v[125]*v[32]+v[126]*v[33];
v[306]=-(v[124]*v[28])-v[125]*v[29]-v[126]*v[30];
v[305]=-(v[124]*v[25])-v[125]*v[26]-v[126]*v[27];
v[145]=v[126]/2e0;
v[130]=(v[124]*v[124])+(v[125]*v[125])+(v[126]*v[126]);
v[220]=sqrt(v[130]);
v[131]=v[220]-v[37]-v[38];
h[0]=v[110];
h[1]=v[111];
(*gN)=v[131];
v[134]=v[121]/2e0;
v[135]=v[120]/2e0;
v[136]=-v[116]/2e0;
v[137]=-v[115]/2e0;
v[138]=v[141]-v[137]*v[66];
v[139]=v[143]-v[137]*v[67];
v[140]=v[145]-v[137]*v[68];
v[142]=-v[141]-v[136]*v[66];
v[144]=-v[143]-v[136]*v[67];
v[146]=-v[145]-v[136]*v[68];
v[147]=-(v[135]*v[66]);
v[148]=-(v[135]*v[67]);
v[149]=-(v[135]*v[68]);
v[150]=-(v[134]*v[66]);
v[151]=-(v[134]*v[67]);
v[152]=-(v[134]*v[68]);
v[153]=v[137]*v[69];
v[154]=v[137]*v[70];
v[155]=v[137]*v[71];
v[156]=v[136]*v[69];
v[157]=v[136]*v[70];
v[158]=v[136]*v[71];
v[159]=-v[141]+v[135]*v[69];
v[160]=-v[143]+v[135]*v[70];
v[161]=-v[145]+v[135]*v[71];
v[162]=v[141]+v[134]*v[69];
v[163]=v[143]+v[134]*v[70];
v[164]=v[145]+v[134]*v[71];
v[165]=1e0/v[310];
v[166]=v[153]*v[165]*v[74]-v[138]*v[165]*v[75];
v[167]=v[154]*v[165]*v[74]-v[139]*v[165]*v[75];
v[168]=v[155]*v[165]*v[74]-v[140]*v[165]*v[75];
v[169]=v[156]*v[165]*v[74]-v[142]*v[165]*v[75];
v[170]=v[157]*v[165]*v[74]-v[144]*v[165]*v[75];
v[171]=v[158]*v[165]*v[74]-v[146]*v[165]*v[75];
v[172]=v[159]*v[165]*v[74]-v[147]*v[165]*v[75];
v[173]=v[160]*v[165]*v[74]-v[148]*v[165]*v[75];
v[174]=v[161]*v[165]*v[74]-v[149]*v[165]*v[75];
v[175]=v[162]*v[165]*v[74]-v[150]*v[165]*v[75];
v[176]=v[163]*v[165]*v[74]-v[151]*v[165]*v[75];
v[177]=v[164]*v[165]*v[74]-v[152]*v[165]*v[75];
v[178]=v[138]*v[165]*v[74]-v[153]*v[165]*v[76];
v[179]=v[139]*v[165]*v[74]-v[154]*v[165]*v[76];
v[180]=v[140]*v[165]*v[74]-v[155]*v[165]*v[76];
v[181]=v[142]*v[165]*v[74]-v[156]*v[165]*v[76];
v[182]=v[144]*v[165]*v[74]-v[157]*v[165]*v[76];
v[183]=v[146]*v[165]*v[74]-v[158]*v[165]*v[76];
v[184]=v[147]*v[165]*v[74]-v[159]*v[165]*v[76];
v[185]=v[148]*v[165]*v[74]-v[160]*v[165]*v[76];
v[186]=v[149]*v[165]*v[74]-v[161]*v[165]*v[76];
v[187]=v[150]*v[165]*v[74]-v[162]*v[165]*v[76];
v[188]=v[151]*v[165]*v[74]-v[163]*v[165]*v[76];
v[189]=v[152]*v[165]*v[74]-v[164]*v[165]*v[76];
b190=v[131]<0e0;
if(b190){
 v[315]=1e0/v[220];
 v[312]=1e0/Power(v[310],2);
 b192=i41==1;
 if(b192){
  b194=v[131]<v[40];
  if(b194){
  } else {
  };
 } else {
 };
 b203=b192;
 if(b203){
  v[204]=0e0;
  v[205]=0e0;
  v[206]=0e0;
  v[207]=0e0;
  v[208]=0e0;
  v[209]=0e0;
  v[210]=0e0;
  v[211]=0e0;
  v[212]=0e0;
  v[213]=0e0;
  v[214]=0e0;
  v[215]=0e0;
  v[216]=0e0;
  v[217]=0e0;
  v[218]=0e0;
  v[219]=0e0;
 } else {
  v[221]=1e0/v[220];
  v[218]=(v[131]*v[221]*v[307]*v[39])/2e0;
  v[219]=(v[131]*v[221]*v[308]*v[39])/2e0;
  v[216]=(v[131]*v[221]*v[305]*v[39])/2e0;
  v[217]=(v[131]*v[221]*v[306]*v[39])/2e0;
  v[215]=(v[121]*v[126]*v[131]*v[221]*v[39])/2e0;
  v[214]=(v[121]*v[125]*v[131]*v[221]*v[39])/2e0;
  v[213]=(v[121]*v[124]*v[131]*v[221]*v[39])/2e0;
  v[212]=(v[120]*v[126]*v[131]*v[221]*v[39])/2e0;
  v[211]=(v[120]*v[125]*v[131]*v[221]*v[39])/2e0;
  v[210]=(v[120]*v[124]*v[131]*v[221]*v[39])/2e0;
  v[209]=-(v[116]*v[126]*v[131]*v[221]*v[39])/2e0;
  v[208]=-(v[116]*v[125]*v[131]*v[221]*v[39])/2e0;
  v[207]=-(v[116]*v[124]*v[131]*v[221]*v[39])/2e0;
  v[206]=-(v[115]*v[126]*v[131]*v[221]*v[39])/2e0;
  v[205]=-(v[115]*v[125]*v[131]*v[221]*v[39])/2e0;
  v[204]=-(v[115]*v[124]*v[131]*v[221]*v[39])/2e0;
 };
 v[222]=-v[218]+v[219];
 v[223]=-v[216]+v[217];
 v[237]=v[165]*v[222]*v[74]-v[165]*v[223]*v[75];
 v[234]=v[165]*v[223]*v[74]-v[165]*v[222]*v[76];
 v[215]=v[215]+v[189]*v[222]+v[177]*v[223];
 v[214]=v[214]+v[188]*v[222]+v[176]*v[223];
 v[213]=v[213]+v[187]*v[222]+v[175]*v[223];
 v[212]=v[212]+v[186]*v[222]+v[174]*v[223];
 v[211]=v[211]+v[185]*v[222]+v[173]*v[223];
 v[210]=v[210]+v[184]*v[222]+v[172]*v[223];
 v[209]=v[209]+v[183]*v[222]+v[171]*v[223];
 v[208]=v[208]+v[182]*v[222]+v[170]*v[223];
 v[207]=v[207]+v[181]*v[222]+v[169]*v[223];
 v[206]=v[206]+v[180]*v[222]+v[168]*v[223];
 v[205]=v[205]+v[179]*v[222]+v[167]*v[223];
 v[204]=v[204]+v[178]*v[222]+v[166]*v[223];
 v[481]=v[204];
 v[482]=v[205];
 v[483]=v[206];
 v[484]=v[207];
 v[485]=v[208];
 v[486]=v[209];
 v[487]=v[210];
 v[488]=v[211];
 v[489]=v[212];
 v[490]=v[213];
 v[491]=v[214];
 v[492]=v[215];
 for(i201=1;i201<=12;i201++){
  v[277]=(i201==12?1e0:0e0);
  v[273]=(i201==11?1e0:0e0);
  v[269]=(i201==10?1e0:0e0);
  v[265]=(i201==9?1e0:0e0);
  v[261]=(i201==8?1e0:0e0);
  v[257]=(i201==7?1e0:0e0);
  v[253]=(i201==6?1e0:0e0);
  v[249]=(i201==5?1e0:0e0);
  v[245]=(i201==4?1e0:0e0);
  v[241]=(i201==3?1e0:0e0);
  v[236]=(i201==2?1e0:0e0);
  v[231]=(i201==1?1e0:0e0);
  v[225]=v[480+i201];
  v[230]=v[231]*v[234];
  v[232]=v[231]*v[237];
  v[233]=v[231];
  v[235]=v[234]*v[236];
  v[238]=v[236]*v[237];
  v[239]=v[236];
  v[240]=v[234]*v[241];
  v[242]=v[237]*v[241];
  v[243]=v[241];
  v[244]=v[234]*v[245];
  v[246]=v[237]*v[245];
  v[247]=v[245];
  v[248]=v[234]*v[249];
  v[250]=v[237]*v[249];
  v[251]=v[249];
  v[252]=v[234]*v[253];
  v[254]=v[237]*v[253];
  v[255]=v[253];
  v[256]=v[234]*v[257];
  v[258]=v[237]*v[257];
  v[259]=v[257];
  v[260]=v[234]*v[261];
  v[262]=v[237]*v[261];
  v[263]=v[261];
  v[264]=v[234]*v[265];
  v[266]=v[237]*v[265];
  v[267]=v[265];
  v[268]=v[234]*v[269];
  v[270]=v[237]*v[269];
  v[271]=v[269];
  v[272]=v[234]*v[273];
  v[274]=v[237]*v[273];
  v[275]=v[273];
  v[276]=v[166]*v[233]+v[167]*v[239]+v[168]*v[243]+v[169]*v[247]+v[170]*v[251]+v[171]*v[255]
   +v[172]*v[259]+v[173]*v[263]+v[174]*v[267]+v[175]*v[271]+v[176]*v[275]+v[177]*v[277];
  v[278]=v[178]*v[233]+v[179]*v[239]+v[180]*v[243]+v[181]*v[247]+v[182]*v[251]+v[183]*v[255]
   +v[184]*v[259]+v[185]*v[263]+v[186]*v[267]+v[187]*v[271]+v[188]*v[275]+v[189]*v[277];
  v[279]=v[233]*(v[223]*(v[153]*v[74]-v[138]*v[75])+v[222]*(v[138]*v[74]-v[153]*v[76]))+v[239]*
   (v[223]*(v[154]*v[74]-v[139]*v[75])+v[222]*(v[139]*v[74]-v[154]*v[76]))+v[243]*(v[223]*
   (v[155]*v[74]-v[140]*v[75])+v[222]*(v[140]*v[74]-v[155]*v[76]))+v[247]*(v[223]*(v[156]*v[74]
   -v[142]*v[75])+v[222]*(v[142]*v[74]-v[156]*v[76]))+v[251]*(v[223]*(v[157]*v[74]-v[144]*v[75])
   +v[222]*(v[144]*v[74]-v[157]*v[76]))+v[255]*(v[223]*(v[158]*v[74]-v[146]*v[75])+v[222]*
   (v[146]*v[74]-v[158]*v[76]))+v[259]*(v[223]*(v[159]*v[74]-v[147]*v[75])+v[222]*(v[147]*v[74]
   -v[159]*v[76]))+v[263]*(v[223]*(v[160]*v[74]-v[148]*v[75])+v[222]*(v[148]*v[74]-v[160]*v[76]))
   +v[267]*(v[223]*(v[161]*v[74]-v[149]*v[75])+v[222]*(v[149]*v[74]-v[161]*v[76]))+v[271]*(v[223]*
   (v[162]*v[74]-v[150]*v[75])+v[222]*(v[150]*v[74]-v[162]*v[76]))+v[275]*(v[223]*(v[163]*v[74]
   -v[151]*v[75])+v[222]*(v[151]*v[74]-v[163]*v[76]))+v[277]*(v[223]*(v[164]*v[74]-v[152]*v[75])
   +v[222]*(v[152]*v[74]-v[164]*v[76]));
  v[280]=v[234]*v[277];
  v[281]=v[237]*v[277];
  v[282]=v[277];
  b283=b192;
  if(b283){
   v[284]=0e0;
   v[285]=0e0;
   v[286]=0e0;
   v[287]=0e0;
   v[288]=0e0;
   v[289]=0e0;
   v[290]=0e0;
   v[291]=0e0;
   v[292]=0e0;
   v[293]=0e0;
   v[294]=0e0;
   v[295]=0e0;
   v[296]=0e0;
   v[297]=0e0;
   v[298]=0e0;
   v[299]=0e0;
   v[300]=0e0;
   v[301]=0e0;
   v[302]=0e0;
   v[303]=0e0;
   v[304]=0e0;
  } else {
   v[296]=-(v[124]*v[131]*v[233]*v[39])/(2e0*v[220])-(v[125]*v[131]*v[239]*v[39])/(2e0*v[220])-
    (v[126]*v[131]*v[243]*v[39])/(2e0*v[220]);
   v[297]=-(v[124]*v[131]*v[247]*v[39])/(2e0*v[220])-(v[125]*v[131]*v[251]*v[39])/(2e0*v[220])-
    (v[126]*v[131]*v[255]*v[39])/(2e0*v[220]);
   v[298]=(v[124]*v[131]*v[259]*v[39])/(2e0*v[220])+(v[125]*v[131]*v[263]*v[39])/(2e0*v[220])+
    (v[126]*v[131]*v[267]*v[39])/(2e0*v[220]);
   v[299]=(v[124]*v[131]*v[271]*v[39])/(2e0*v[220])+(v[125]*v[131]*v[275]*v[39])/(2e0*v[220])+
    (v[126]*v[131]*v[282]*v[39])/(2e0*v[220]);
   v[289]=-(v[126]*v[131]*v[276]*v[39])/(2e0*v[220]);
   v[288]=-(v[125]*v[131]*v[276]*v[39])/(2e0*v[220]);
   v[287]=-(v[124]*v[131]*v[276]*v[39])/(2e0*v[220]);
   v[286]=-v[289];
   v[285]=-v[288];
   v[284]=-v[287];
   v[295]=(v[126]*v[131]*v[278]*v[39])/(2e0*v[220]);
   v[294]=(v[125]*v[131]*v[278]*v[39])/(2e0*v[220]);
   v[293]=(v[124]*v[131]*v[278]*v[39])/(2e0*v[220]);
   v[303]=-(v[115]*v[124]*v[233]*v[39])/(2e0*v[220])-(v[115]*v[125]*v[239]*v[39])/(2e0*v[220])-
    (v[115]*v[126]*v[243]*v[39])/(2e0*v[220])-(v[116]*v[124]*v[247]*v[39])/(2e0*v[220])-
    (v[116]*v[125]*v[251]*v[39])/(2e0*v[220])-(v[116]*v[126]*v[255]*v[39])/(2e0*v[220])+
    (v[120]*v[124]*v[259]*v[39])/(2e0*v[220])+(v[120]*v[125]*v[263]*v[39])/(2e0*v[220])+
    (v[120]*v[126]*v[267]*v[39])/(2e0*v[220])+(v[121]*v[124]*v[271]*v[39])/(2e0*v[220])+
    (v[121]*v[125]*v[275]*v[39])/(2e0*v[220])+(v[121]*v[126]*v[282]*v[39])/(2e0*v[220])-
    (v[276]*v[305]*v[39])/(2e0*v[220])+(v[276]*v[306]*v[39])/(2e0*v[220])-(v[278]*v[307]*v[39])/
    (2e0*v[220])+(v[278]*v[308]*v[39])/(2e0*v[220]);
   v[309]=1e0/Power(v[220],2);
   v[304]=(v[115]*v[124]*v[131]*v[233]*v[309]*v[39])/2e0+(v[115]*v[125]*v[131]*v[239]*v[309]*v[39])
    /2e0+(v[115]*v[126]*v[131]*v[243]*v[309]*v[39])/2e0+(v[116]*v[124]*v[131]*v[247]*v[309]*v[39])
    /2e0+(v[116]*v[125]*v[131]*v[251]*v[309]*v[39])/2e0+(v[116]*v[126]*v[131]*v[255]*v[309]*v[39])
    /2e0-(v[120]*v[124]*v[131]*v[259]*v[309]*v[39])/2e0-(v[120]*v[125]*v[131]*v[263]*v[309]*v[39])
    /2e0-(v[120]*v[126]*v[131]*v[267]*v[309]*v[39])/2e0-(v[121]*v[124]*v[131]*v[271]*v[309]*v[39])
    /2e0-(v[121]*v[125]*v[131]*v[275]*v[309]*v[39])/2e0-(v[121]*v[126]*v[131]*v[282]*v[309]*v[39])
    /2e0+(v[131]*v[276]*v[305]*v[309]*v[39])/2e0-(v[131]*v[276]*v[306]*v[309]*v[39])/2e0+
    (v[131]*v[278]*v[307]*v[309]*v[39])/2e0-(v[131]*v[278]*v[308]*v[309]*v[39])/2e0;
   v[302]=-(v[115]*v[131]*v[243]*v[39])/(2e0*v[220])-(v[116]*v[131]*v[255]*v[39])/(2e0*v[220])+
    (v[120]*v[131]*v[267]*v[39])/(2e0*v[220])+(v[131]*v[27]*v[276]*v[39])/(2e0*v[220])+
    (v[121]*v[131]*v[282]*v[39])/(2e0*v[220])-(v[131]*v[276]*v[30]*v[39])/(2e0*v[220])-
    (v[131]*v[278]*v[33]*v[39])/(2e0*v[220])+(v[131]*v[278]*v[36]*v[39])/(2e0*v[220]);
   v[301]=-(v[115]*v[131]*v[239]*v[39])/(2e0*v[220])-(v[116]*v[131]*v[251]*v[39])/(2e0*v[220])+
    (v[120]*v[131]*v[263]*v[39])/(2e0*v[220])+(v[121]*v[131]*v[275]*v[39])/(2e0*v[220])+
    (v[131]*v[26]*v[276]*v[39])/(2e0*v[220])-(v[131]*v[276]*v[29]*v[39])/(2e0*v[220])-
    (v[131]*v[278]*v[32]*v[39])/(2e0*v[220])+(v[131]*v[278]*v[35]*v[39])/(2e0*v[220]);
   v[300]=-(v[115]*v[131]*v[233]*v[39])/(2e0*v[220])-(v[116]*v[131]*v[247]*v[39])/(2e0*v[220])+
    (v[120]*v[131]*v[259]*v[39])/(2e0*v[220])+(v[121]*v[131]*v[271]*v[39])/(2e0*v[220])+
    (v[131]*v[25]*v[276]*v[39])/(2e0*v[220])-(v[131]*v[276]*v[28]*v[39])/(2e0*v[220])-
    (v[131]*v[278]*v[31]*v[39])/(2e0*v[220])+(v[131]*v[278]*v[315]*v[34]*v[39])/2e0;
   v[292]=-v[295];
   v[291]=-v[294];
   v[290]=-v[293];
  };
  v[311]=(v[138]*v[165]*v[222]+v[153]*v[165]*v[223])*v[233]+(v[139]*v[165]*v[222]
   +v[154]*v[165]*v[223])*v[239]+(v[140]*v[165]*v[222]+v[155]*v[165]*v[223])*v[243]+
   (v[142]*v[165]*v[222]+v[156]*v[165]*v[223])*v[247]+(v[144]*v[165]*v[222]+v[157]*v[165]*v[223]
   )*v[251]+(v[146]*v[165]*v[222]+v[158]*v[165]*v[223])*v[255]+(v[147]*v[165]*v[222]
   +v[159]*v[165]*v[223])*v[259]+(v[148]*v[165]*v[222]+v[160]*v[165]*v[223])*v[263]+
   (v[149]*v[165]*v[222]+v[161]*v[165]*v[223])*v[267]+(v[150]*v[165]*v[222]+v[162]*v[165]*v[223]
   )*v[271]+(v[151]*v[165]*v[222]+v[163]*v[165]*v[223])*v[275]+(v[152]*v[165]*v[222]
   +v[164]*v[165]*v[223])*v[282]+2e0*v[279]*v[312]*v[74];
  v[313]=-(v[138]*v[165]*v[223]*v[233])-v[139]*v[165]*v[223]*v[239]-v[140]*v[165]*v[223]*v[243]
   -v[142]*v[165]*v[223]*v[247]-v[144]*v[165]*v[223]*v[251]-v[146]*v[165]*v[223]*v[255]
   -v[147]*v[165]*v[223]*v[259]-v[148]*v[165]*v[223]*v[263]-v[149]*v[165]*v[223]*v[267]
   -v[150]*v[165]*v[223]*v[271]-v[151]*v[165]*v[223]*v[275]-v[152]*v[165]*v[223]*v[282]
   -v[279]*v[312]*v[76];
  v[314]=-(v[153]*v[165]*v[222]*v[233])-v[154]*v[165]*v[222]*v[239]-v[155]*v[165]*v[222]*v[243]
   -v[156]*v[165]*v[222]*v[247]-v[157]*v[165]*v[222]*v[251]-v[158]*v[165]*v[222]*v[255]
   -v[159]*v[165]*v[222]*v[259]-v[160]*v[165]*v[222]*v[263]-v[161]*v[165]*v[222]*v[267]
   -v[162]*v[165]*v[222]*v[271]-v[163]*v[165]*v[222]*v[275]-v[164]*v[165]*v[222]*v[282]
   -v[279]*v[312]*v[75];
  v[304]=v[303]+v[304];
  v[302]=(v[242]-v[254]-v[264]+v[280])/2e0+v[302]+v[126]*v[304]*v[315];
  v[301]=(v[238]-v[250]-v[260]+v[272])/2e0+v[301]+v[125]*v[304]*v[315];
  v[300]=(v[232]-v[246]-v[256]+v[268])/2e0+v[300]+v[124]*v[304]*v[315];
  v[298]=v[298]+(v[300]*v[31])/2e0+(v[301]*v[32])/2e0+(v[302]*v[33])/2e0+(-(v[258]*v[66])
   -v[262]*v[67]-v[266]*v[68]+v[256]*v[69]+v[260]*v[70]+v[264]*v[71])/2e0;
  v[299]=v[299]+(v[300]*v[34])/2e0+(v[301]*v[35])/2e0+(v[302]*v[36])/2e0+(-(v[270]*v[66])
   -v[274]*v[67]-v[281]*v[68]+v[268]*v[69]+v[272]*v[70]+v[280]*v[71])/2e0;
  v[296]=v[296]-(v[25]*v[300])/2e0-(v[26]*v[301])/2e0-(v[27]*v[302])/2e0+(v[232]*v[66]+v[238]*v[67]
   +v[242]*v[68]-v[230]*v[69]-v[235]*v[70]-v[240]*v[71])/2e0;
  v[297]=v[297]-(v[28]*v[300])/2e0-(v[29]*v[301])/2e0-(v[30]*v[302])/2e0+(v[246]*v[66]+v[250]*v[67]
   +v[254]*v[68]-v[244]*v[69]-v[248]*v[70]-v[252]*v[71])/2e0;
  v[316]=-v[298]+v[299];
  v[317]=-v[296]+v[297];
  v[318]=v[137]*v[240]+v[136]*v[252]+v[135]*v[264]+v[134]*v[280]-v[311]*v[68]+2e0*v[313]*v[71];
  v[321]=v[318]/2e0;
  v[319]=v[137]*v[235]+v[136]*v[248]+v[135]*v[260]+v[134]*v[272]-v[311]*v[67]+2e0*v[313]*v[70];
  v[322]=v[319]/2e0;
  v[320]=v[137]*v[230]+v[136]*v[244]+v[135]*v[256]+v[134]*v[268]-v[311]*v[66]+2e0*v[313]*v[69];
  v[323]=v[320]/2e0;
  v[295]=v[295]+(v[121]*v[302])/2e0+v[321];
  v[292]=v[292]+(v[120]*v[302])/2e0-v[321];
  v[294]=v[294]+(v[121]*v[301])/2e0+v[322];
  v[291]=v[291]+(v[120]*v[301])/2e0-v[322];
  v[293]=v[293]+(v[121]*v[300])/2e0+v[323];
  v[290]=v[290]+(v[120]*v[300])/2e0-v[323];
  v[324]=-(v[137]*v[242])-v[136]*v[254]-v[135]*v[266]-v[134]*v[281]+2e0*v[314]*v[68]-v[311]*v[71];
  v[327]=v[324]/2e0;
  v[325]=-(v[137]*v[238])-v[136]*v[250]-v[135]*v[262]-v[134]*v[274]+2e0*v[314]*v[67]-v[311]*v[70];
  v[328]=v[325]/2e0;
  v[326]=-(v[137]*v[232])-v[136]*v[246]-v[135]*v[258]-v[134]*v[270]+2e0*v[314]*v[66]-v[311]*v[69];
  v[329]=v[326]/2e0;
  v[289]=v[289]-(v[116]*v[302])/2e0+v[327];
  v[286]=v[286]-(v[115]*v[302])/2e0-v[327];
  v[288]=v[288]-(v[116]*v[301])/2e0+v[328];
  v[285]=v[285]-(v[115]*v[301])/2e0-v[328];
  v[287]=v[287]-(v[116]*v[300])/2e0+v[329];
  v[284]=v[284]-(v[115]*v[300])/2e0-v[329];
  R[i201-1]+=v[225];
  for(i227=1;i227<=12;i227++){
   v[653]=v[284];
   v[654]=v[285];
   v[655]=v[286];
   v[656]=v[287];
   v[657]=v[288];
   v[658]=v[289];
   v[659]=v[290];
   v[660]=v[291];
   v[661]=v[292];
   v[662]=v[293];
   v[663]=v[294];
   v[664]=v[295];
   v[677]=v[178];
   v[678]=v[179];
   v[679]=v[180];
   v[680]=v[181];
   v[681]=v[182];
   v[682]=v[183];
   v[683]=v[184];
   v[684]=v[185];
   v[685]=v[186];
   v[686]=v[187];
   v[687]=v[188];
   v[688]=v[189];
   v[665]=v[166];
   v[666]=v[167];
   v[667]=v[168];
   v[668]=v[169];
   v[669]=v[170];
   v[670]=v[171];
   v[671]=v[172];
   v[672]=v[173];
   v[673]=v[174];
   v[674]=v[175];
   v[675]=v[176];
   v[676]=v[177];
   v[330]=v[652+i227]+v[317]*v[664+i227]+v[316]*v[676+i227];
   K[i201-1][i227-1]+=v[330];
  };/* end for */
 };/* end for */
} else {
 R[0]=0e0;
 R[1]=0e0;
 R[2]=0e0;
 R[3]=0e0;
 R[4]=0e0;
 R[5]=0e0;
 R[6]=0e0;
 R[7]=0e0;
 R[8]=0e0;
 R[9]=0e0;
 R[10]=0e0;
 R[11]=0e0;
 K[0][0]=0e0;
 K[0][1]=0e0;
 K[0][2]=0e0;
 K[0][3]=0e0;
 K[0][4]=0e0;
 K[0][5]=0e0;
 K[0][6]=0e0;
 K[0][7]=0e0;
 K[0][8]=0e0;
 K[0][9]=0e0;
 K[0][10]=0e0;
 K[0][11]=0e0;
 K[1][0]=0e0;
 K[1][1]=0e0;
 K[1][2]=0e0;
 K[1][3]=0e0;
 K[1][4]=0e0;
 K[1][5]=0e0;
 K[1][6]=0e0;
 K[1][7]=0e0;
 K[1][8]=0e0;
 K[1][9]=0e0;
 K[1][10]=0e0;
 K[1][11]=0e0;
 K[2][0]=0e0;
 K[2][1]=0e0;
 K[2][2]=0e0;
 K[2][3]=0e0;
 K[2][4]=0e0;
 K[2][5]=0e0;
 K[2][6]=0e0;
 K[2][7]=0e0;
 K[2][8]=0e0;
 K[2][9]=0e0;
 K[2][10]=0e0;
 K[2][11]=0e0;
 K[3][0]=0e0;
 K[3][1]=0e0;
 K[3][2]=0e0;
 K[3][3]=0e0;
 K[3][4]=0e0;
 K[3][5]=0e0;
 K[3][6]=0e0;
 K[3][7]=0e0;
 K[3][8]=0e0;
 K[3][9]=0e0;
 K[3][10]=0e0;
 K[3][11]=0e0;
 K[4][0]=0e0;
 K[4][1]=0e0;
 K[4][2]=0e0;
 K[4][3]=0e0;
 K[4][4]=0e0;
 K[4][5]=0e0;
 K[4][6]=0e0;
 K[4][7]=0e0;
 K[4][8]=0e0;
 K[4][9]=0e0;
 K[4][10]=0e0;
 K[4][11]=0e0;
 K[5][0]=0e0;
 K[5][1]=0e0;
 K[5][2]=0e0;
 K[5][3]=0e0;
 K[5][4]=0e0;
 K[5][5]=0e0;
 K[5][6]=0e0;
 K[5][7]=0e0;
 K[5][8]=0e0;
 K[5][9]=0e0;
 K[5][10]=0e0;
 K[5][11]=0e0;
 K[6][0]=0e0;
 K[6][1]=0e0;
 K[6][2]=0e0;
 K[6][3]=0e0;
 K[6][4]=0e0;
 K[6][5]=0e0;
 K[6][6]=0e0;
 K[6][7]=0e0;
 K[6][8]=0e0;
 K[6][9]=0e0;
 K[6][10]=0e0;
 K[6][11]=0e0;
 K[7][0]=0e0;
 K[7][1]=0e0;
 K[7][2]=0e0;
 K[7][3]=0e0;
 K[7][4]=0e0;
 K[7][5]=0e0;
 K[7][6]=0e0;
 K[7][7]=0e0;
 K[7][8]=0e0;
 K[7][9]=0e0;
 K[7][10]=0e0;
 K[7][11]=0e0;
 K[8][0]=0e0;
 K[8][1]=0e0;
 K[8][2]=0e0;
 K[8][3]=0e0;
 K[8][4]=0e0;
 K[8][5]=0e0;
 K[8][6]=0e0;
 K[8][7]=0e0;
 K[8][8]=0e0;
 K[8][9]=0e0;
 K[8][10]=0e0;
 K[8][11]=0e0;
 K[9][0]=0e0;
 K[9][1]=0e0;
 K[9][2]=0e0;
 K[9][3]=0e0;
 K[9][4]=0e0;
 K[9][5]=0e0;
 K[9][6]=0e0;
 K[9][7]=0e0;
 K[9][8]=0e0;
 K[9][9]=0e0;
 K[9][10]=0e0;
 K[9][11]=0e0;
 K[10][0]=0e0;
 K[10][1]=0e0;
 K[10][2]=0e0;
 K[10][3]=0e0;
 K[10][4]=0e0;
 K[10][5]=0e0;
 K[10][6]=0e0;
 K[10][7]=0e0;
 K[10][8]=0e0;
 K[10][9]=0e0;
 K[10][10]=0e0;
 K[10][11]=0e0;
 K[11][0]=0e0;
 K[11][1]=0e0;
 K[11][2]=0e0;
 K[11][3]=0e0;
 K[11][4]=0e0;
 K[11][5]=0e0;
 K[11][6]=0e0;
 K[11][7]=0e0;
 K[11][8]=0e0;
 K[11][9]=0e0;
 K[11][10]=0e0;
 K[11][11]=0e0;
};
};
